scalar JalaliDate
"""
The `Book` is an `object` type that represents a collection of available properties and related data types.
Related Types:
`Author`
Accessible parameters:
`id`
"""
type Book
{
    id: ID!
    title: String!
    genre: String!
    publish_at: JalaliDate!
    author: Author!
}

"""
The `Human` is an `interface` type that represents a collection of properties and implements on other types.
"""
interface Human
{
    id: ID!
    title: String!
    age: Int!
}

"""
The `Author` is an `object` type that represents a collection of available properties and related data types.
Related Types:
`Books`
Accessible parameters:
`id`
"""
type Author implements Human
{
    # Inherited fields.
    id: ID!
    title: String!
    age: Int!
    # Extra fields.
    books: [Book!]!
}

type Developer implements Human
{
    # Inherited fields.
    id: ID!
    title: String!
    age: Int!
    # Extra fields.
    skills: [String!]!
}

"""
The `Color` is an `enum` type that represents a list of available values.
Accessible parameters:
`name`
"""
enum Color{
    RED
    GREEN
    BLUE
}

"""
The `SearchResult` is an `union` type that represents a list of possible types.
"""
union SearchResult = Author | Developer

# Special Type
type Query {
    authors: [Author!]!
    author(id: ID!=1): Author
    books: [Book!]!
    book(id:ID!): Book
    hexColor(name: Color!): String
    search(id: ID!): [SearchResult]
}